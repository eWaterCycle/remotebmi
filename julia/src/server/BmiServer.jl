# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""
Encapsulates generated server code for BmiServer

The following server methods must be implemented:

- **get_component_name**
    - *invocation:* GET /get_component_name
    - *signature:* get_component_name(req::HTTP.Request;) -> GetComponentNameResponse
- **get_input_item_count**
    - *invocation:* GET /get_input_item_count
    - *signature:* get_input_item_count(req::HTTP.Request;) -> Int64
- **get_input_var_names**
    - *invocation:* GET /get_input_var_names
    - *signature:* get_input_var_names(req::HTTP.Request;) -> Vector{String}
- **get_output_item_count**
    - *invocation:* GET /get_output_item_count
    - *signature:* get_output_item_count(req::HTTP.Request;) -> Int64
- **get_output_var_names**
    - *invocation:* GET /get_output_var_names
    - *signature:* get_output_var_names(req::HTTP.Request;) -> Vector{String}
- **get_value**
    - *invocation:* GET /get_value/{name}
    - *signature:* get_value(req::HTTP.Request, name::String;) -> Vector{Float64}
- **get_value_at_indices**
    - *invocation:* POST /get_value_at_indices/{name}
    - *signature:* get_value_at_indices(req::HTTP.Request, name::String, request_body::Vector{Int64};) -> Vector{Float64}
- **get_grid_rank**
    - *invocation:* GET /get_grid_rank/{grid}
    - *signature:* get_grid_rank(req::HTTP.Request, grid::Int64;) -> Int64
- **get_grid_size**
    - *invocation:* GET /get_grid_size/{grid}
    - *signature:* get_grid_size(req::HTTP.Request, grid::Int64;) -> Int64
- **get_grid_type**
    - *invocation:* GET /get_grid_type/{grid}
    - *signature:* get_grid_type(req::HTTP.Request, grid::Int64;) -> GetGridTypeResponse
- **finalize**
    - *invocation:* DELETE /finalize
    - *signature:* finalize(req::HTTP.Request;) -> Nothing
- **initialize**
    - *invocation:* POST /initialize
    - *signature:* initialize(req::HTTP.Request, initialize_request::InitializeRequest;) -> Nothing
- **update**
    - *invocation:* POST /update
    - *signature:* update(req::HTTP.Request;) -> Nothing
- **update_until**
    - *invocation:* POST /update_until
    - *signature:* update_until(req::HTTP.Request, body::Float64;) -> Nothing
- **get_grid_x**
    - *invocation:* GET /get_grid_x/{grid}
    - *signature:* get_grid_x(req::HTTP.Request, grid::Int64;) -> Vector{Float64}
- **get_grid_y**
    - *invocation:* GET /get_grid_y/{grid}
    - *signature:* get_grid_y(req::HTTP.Request, grid::Int64;) -> Vector{Float64}
- **get_grid_z**
    - *invocation:* GET /get_grid_z/{grid}
    - *signature:* get_grid_z(req::HTTP.Request, grid::Int64;) -> Vector{Float64}
- **set_value**
    - *invocation:* POST /set_value/{name}
    - *signature:* set_value(req::HTTP.Request, name::String, request_body::Vector{Float64};) -> Nothing
- **set_value_at_indices**
    - *invocation:* POST /set_value_at_indices/{name}
    - *signature:* set_value_at_indices(req::HTTP.Request, name::String, set_value_at_indices_request::SetValueAtIndicesRequest;) -> Nothing
- **get_current_time**
    - *invocation:* GET /get_current_time
    - *signature:* get_current_time(req::HTTP.Request;) -> Float64
- **get_end_time**
    - *invocation:* GET /get_end_time
    - *signature:* get_end_time(req::HTTP.Request;) -> Float64
- **get_start_time**
    - *invocation:* GET /get_start_time
    - *signature:* get_start_time(req::HTTP.Request;) -> Float64
- **get_time_step**
    - *invocation:* GET /get_time_step
    - *signature:* get_time_step(req::HTTP.Request;) -> Float64
- **get_time_units**
    - *invocation:* GET /get_time_units
    - *signature:* get_time_units(req::HTTP.Request;) -> GetTimeUnitsResponse
- **get_grid_origin**
    - *invocation:* GET /get_grid_origin/{grid}
    - *signature:* get_grid_origin(req::HTTP.Request, grid::Int64;) -> Vector{Float64}
- **get_grid_shape**
    - *invocation:* GET /get_grid_shape/{grid}
    - *signature:* get_grid_shape(req::HTTP.Request, grid::Int64;) -> Vector{Int64}
- **get_grid_spacing**
    - *invocation:* GET /get_grid_spacing/{grid}
    - *signature:* get_grid_spacing(req::HTTP.Request, grid::Int64;) -> Vector{Float64}
- **get_grid_edge_count**
    - *invocation:* GET /get_grid_edge_count/{grid}
    - *signature:* get_grid_edge_count(req::HTTP.Request, grid::Int64;) -> Int64
- **get_grid_edge_nodes**
    - *invocation:* GET /get_grid_edge_nodes/{grid}
    - *signature:* get_grid_edge_nodes(req::HTTP.Request, grid::Int64;) -> Vector{Int64}
- **get_grid_face_count**
    - *invocation:* GET /get_grid_face_count/{grid}
    - *signature:* get_grid_face_count(req::HTTP.Request, grid::Int64;) -> Int64
- **get_grid_face_edges**
    - *invocation:* GET /get_grid_face_edges/{grid}
    - *signature:* get_grid_face_edges(req::HTTP.Request, grid::Int64;) -> Vector{Int64}
- **get_grid_face_nodes**
    - *invocation:* GET /get_grid_face_nodes/{grid}
    - *signature:* get_grid_face_nodes(req::HTTP.Request, grid::Int64;) -> Vector{Int64}
- **get_grid_node_count**
    - *invocation:* GET /get_grid_node_count/{grid}
    - *signature:* get_grid_node_count(req::HTTP.Request, grid::Int64;) -> Int64
- **get_grid_nodes_per_face**
    - *invocation:* GET /get_grid_nodes_per_face/{grid}
    - *signature:* get_grid_nodes_per_face(req::HTTP.Request, grid::Int64;) -> Vector{Int64}
- **get_var_grid**
    - *invocation:* GET /get_var_grid/{name}
    - *signature:* get_var_grid(req::HTTP.Request, name::String;) -> Int64
- **get_var_itemsize**
    - *invocation:* GET /get_var_itemsize/{name}
    - *signature:* get_var_itemsize(req::HTTP.Request, name::String;) -> Int64
- **get_var_location**
    - *invocation:* GET /get_var_location/{name}
    - *signature:* get_var_location(req::HTTP.Request, name::String;) -> GetVarLocationResponseLocation
- **get_var_nbytes**
    - *invocation:* GET /get_var_nbytes/{name}
    - *signature:* get_var_nbytes(req::HTTP.Request, name::String;) -> Int64
- **get_var_type**
    - *invocation:* GET /get_var_type/{name}
    - *signature:* get_var_type(req::HTTP.Request, name::String;) -> GetVarTypeResponse
- **get_var_units**
    - *invocation:* GET /get_var_units/{name}
    - *signature:* get_var_units(req::HTTP.Request, name::String;) -> GetVarUnitsResponse
"""
module BmiServer

using HTTP
using URIs
using Dates
using TimeZones
using OpenAPI
using OpenAPI.Servers

const API_VERSION = "2.0"

include("modelincludes.jl")

include("apis/api_ExchangeItemsApi.jl")
include("apis/api_GettersApi.jl")
include("apis/api_GridInformationApi.jl")
include("apis/api_IRFApi.jl")
include("apis/api_NURCApi.jl")
include("apis/api_SettersApi.jl")
include("apis/api_TimeInformationApi.jl")
include("apis/api_UniformRectilinearApi.jl")
include("apis/api_UnstructuredApi.jl")
include("apis/api_VariableInformationApi.jl")

"""
Register handlers for all APIs in this module in the supplied `Router` instance.

Paramerets:
- `router`: Router to register handlers in
- `impl`: module that implements the server methods

Optional parameters:
- `path_prefix`: prefix to be applied to all paths
- `optional_middlewares`: Register one or more optional middlewares to be applied to all requests.

Optional middlewares can be one or more of:
    - `init`: called before the request is processed
    - `pre_validation`: called after the request is parsed but before validation
    - `pre_invoke`: called after validation but before the handler is invoked
    - `post_invoke`: called after the handler is invoked but before the response is sent

The order in which middlewares are invoked are:
`init |> read |> pre_validation |> validate |> pre_invoke |> invoke |> post_invoke`
"""
function register(router::HTTP.Router, impl; path_prefix::String = "", optional_middlewares...)
  registerExchangeItemsApi(router, impl; path_prefix = path_prefix, optional_middlewares...)
  registerGettersApi(router, impl; path_prefix = path_prefix, optional_middlewares...)
  registerGridInformationApi(router, impl; path_prefix = path_prefix, optional_middlewares...)
  registerIRFApi(router, impl; path_prefix = path_prefix, optional_middlewares...)
  registerNURCApi(router, impl; path_prefix = path_prefix, optional_middlewares...)
  registerSettersApi(router, impl; path_prefix = path_prefix, optional_middlewares...)
  registerTimeInformationApi(router, impl; path_prefix = path_prefix, optional_middlewares...)
  registerUniformRectilinearApi(router, impl; path_prefix = path_prefix, optional_middlewares...)
  registerUnstructuredApi(router, impl; path_prefix = path_prefix, optional_middlewares...)
  registerVariableInformationApi(router, impl; path_prefix = path_prefix, optional_middlewares...)
  return router
end

# export models
export GetComponentNameResponse
export GetGridTypeResponse
export GetTimeUnitsResponse
export GetVarLocationResponseLocation
export GetVarTypeResponse
export GetVarUnitsResponse
export InitializeRequest
export ProblemDetails
export SetValueAtIndicesRequest

end # module BmiServer
