# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

function get_grid_x_read(handler)
  function get_grid_x_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    path_params = HTTP.getparams(req)
    openapi_params["grid"] = OpenAPI.Servers.to_param(Int64, path_params, "grid"; required = true)
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function get_grid_x_validate(handler)
  function get_grid_x_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    return handler(req)
  end
end

function get_grid_x_invoke(impl; post_invoke = nothing)
  function get_grid_x_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.get_grid_x(req::HTTP.Request, openapi_params["grid"];)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function get_grid_y_read(handler)
  function get_grid_y_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    path_params = HTTP.getparams(req)
    openapi_params["grid"] = OpenAPI.Servers.to_param(Int64, path_params, "grid"; required = true)
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function get_grid_y_validate(handler)
  function get_grid_y_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    return handler(req)
  end
end

function get_grid_y_invoke(impl; post_invoke = nothing)
  function get_grid_y_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.get_grid_y(req::HTTP.Request, openapi_params["grid"];)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function get_grid_z_read(handler)
  function get_grid_z_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    path_params = HTTP.getparams(req)
    openapi_params["grid"] = OpenAPI.Servers.to_param(Int64, path_params, "grid"; required = true)
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function get_grid_z_validate(handler)
  function get_grid_z_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    return handler(req)
  end
end

function get_grid_z_invoke(impl; post_invoke = nothing)
  function get_grid_z_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.get_grid_z(req::HTTP.Request, openapi_params["grid"];)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function registerNURCApi(
  router::HTTP.Router,
  impl;
  path_prefix::String = "",
  optional_middlewares...,
)
  HTTP.register!(
    router,
    "GET",
    path_prefix * "/get_grid_x/{grid}",
    OpenAPI.Servers.middleware(
      impl,
      get_grid_x_read,
      get_grid_x_validate,
      get_grid_x_invoke;
      optional_middlewares...,
    ),
  )
  HTTP.register!(
    router,
    "GET",
    path_prefix * "/get_grid_y/{grid}",
    OpenAPI.Servers.middleware(
      impl,
      get_grid_y_read,
      get_grid_y_validate,
      get_grid_y_invoke;
      optional_middlewares...,
    ),
  )
  HTTP.register!(
    router,
    "GET",
    path_prefix * "/get_grid_z/{grid}",
    OpenAPI.Servers.middleware(
      impl,
      get_grid_z_read,
      get_grid_z_validate,
      get_grid_z_invoke;
      optional_middlewares...,
    ),
  )
  return router
end
