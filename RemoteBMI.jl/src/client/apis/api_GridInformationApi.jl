# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct GridInformationApi <: OpenAPI.APIClientImpl
  client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `GridInformationApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{GridInformationApi}) = "http://localhost:50051"

const _returntypes_get_grid_rank_GridInformationApi = Dict{Regex, Type}(
  Regex("^" * replace("200", "x" => ".") * "\$") => Int64,
  Regex("^" * replace("0", "x" => ".") * "\$") => ProblemDetails,
)

function _oacinternal_get_grid_rank(_api::GridInformationApi, grid::Int64; _mediaType = nothing)
  _ctx = OpenAPI.Clients.Ctx(
    _api.client,
    "GET",
    _returntypes_get_grid_rank_GridInformationApi,
    "/get_grid_rank/{grid}",
    [],
  )
  OpenAPI.Clients.set_param(_ctx.path, "grid", grid)  # type Int64
  OpenAPI.Clients.set_header_accept(_ctx, ["application/json"])
  OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
  return _ctx
end

@doc raw"""Given a grid identifier, get the rank (the number of dimensions) of that grid as an integer. 

Params:
- grid::Int64 (required)

Return: Int64, OpenAPI.Clients.ApiResponse
"""
function get_grid_rank(_api::GridInformationApi, grid::Int64; _mediaType = nothing)
  _ctx = _oacinternal_get_grid_rank(_api, grid; _mediaType = _mediaType)
  return OpenAPI.Clients.exec(_ctx)
end

function get_grid_rank(
  _api::GridInformationApi,
  response_stream::Channel,
  grid::Int64;
  _mediaType = nothing,
)
  _ctx = _oacinternal_get_grid_rank(_api, grid; _mediaType = _mediaType)
  return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_grid_size_GridInformationApi = Dict{Regex, Type}(
  Regex("^" * replace("200", "x" => ".") * "\$") => Int64,
  Regex("^" * replace("0", "x" => ".") * "\$") => ProblemDetails,
)

function _oacinternal_get_grid_size(_api::GridInformationApi, grid::Int64; _mediaType = nothing)
  _ctx = OpenAPI.Clients.Ctx(
    _api.client,
    "GET",
    _returntypes_get_grid_size_GridInformationApi,
    "/get_grid_size/{grid}",
    [],
  )
  OpenAPI.Clients.set_param(_ctx.path, "grid", grid)  # type Int64
  OpenAPI.Clients.set_header_accept(_ctx, ["application/json"])
  OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
  return _ctx
end

@doc raw"""Given a grid identifier, get the total number of elements (or nodes) of that grid as an integer. 

Params:
- grid::Int64 (required)

Return: Int64, OpenAPI.Clients.ApiResponse
"""
function get_grid_size(_api::GridInformationApi, grid::Int64; _mediaType = nothing)
  _ctx = _oacinternal_get_grid_size(_api, grid; _mediaType = _mediaType)
  return OpenAPI.Clients.exec(_ctx)
end

function get_grid_size(
  _api::GridInformationApi,
  response_stream::Channel,
  grid::Int64;
  _mediaType = nothing,
)
  _ctx = _oacinternal_get_grid_size(_api, grid; _mediaType = _mediaType)
  return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_grid_type_GridInformationApi = Dict{Regex, Type}(
  Regex("^" * replace("200", "x" => ".") * "\$") => GetGridTypeResponse,
  Regex("^" * replace("0", "x" => ".") * "\$") => ProblemDetails,
)

function _oacinternal_get_grid_type(_api::GridInformationApi, grid::Int64; _mediaType = nothing)
  _ctx = OpenAPI.Clients.Ctx(
    _api.client,
    "GET",
    _returntypes_get_grid_type_GridInformationApi,
    "/get_grid_type/{grid}",
    [],
  )
  OpenAPI.Clients.set_param(_ctx.path, "grid", grid)  # type Int64
  OpenAPI.Clients.set_header_accept(_ctx, ["application/json"])
  OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
  return _ctx
end

@doc raw"""Given a grid identifier, get the type of that grid as a string. 

Params:
- grid::Int64 (required)

Return: GetGridTypeResponse, OpenAPI.Clients.ApiResponse
"""
function get_grid_type(_api::GridInformationApi, grid::Int64; _mediaType = nothing)
  _ctx = _oacinternal_get_grid_type(_api, grid; _mediaType = _mediaType)
  return OpenAPI.Clients.exec(_ctx)
end

function get_grid_type(
  _api::GridInformationApi,
  response_stream::Channel,
  grid::Int64;
  _mediaType = nothing,
)
  _ctx = _oacinternal_get_grid_type(_api, grid; _mediaType = _mediaType)
  return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_grid_rank
export get_grid_size
export get_grid_type
