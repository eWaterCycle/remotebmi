# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ExchangeItemsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ExchangeItemsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ExchangeItemsApi }) = "http://localhost:50051"

const _returntypes_get_component_name_ExchangeItemsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetComponentNameResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => ProblemDetails,
)

function _oacinternal_get_component_name(_api::ExchangeItemsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_component_name_ExchangeItemsApi, "/get_component_name", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the name of the model component.

Params:

Return: GetComponentNameResponse, OpenAPI.Clients.ApiResponse
"""
function get_component_name(_api::ExchangeItemsApi; _mediaType=nothing)
    _ctx = _oacinternal_get_component_name(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_component_name(_api::ExchangeItemsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_component_name(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_input_item_count_ExchangeItemsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Int64,
    Regex("^" * replace("0", "x"=>".") * "\$") => ProblemDetails,
)

function _oacinternal_get_input_item_count(_api::ExchangeItemsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_input_item_count_ExchangeItemsApi, "/get_input_item_count", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""The number of variables the model can use from other models implementing a BMI. 

Params:

Return: Int64, OpenAPI.Clients.ApiResponse
"""
function get_input_item_count(_api::ExchangeItemsApi; _mediaType=nothing)
    _ctx = _oacinternal_get_input_item_count(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_input_item_count(_api::ExchangeItemsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_input_item_count(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_input_var_names_ExchangeItemsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{String},
    Regex("^" * replace("0", "x"=>".") * "\$") => ProblemDetails,
)

function _oacinternal_get_input_var_names(_api::ExchangeItemsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_input_var_names_ExchangeItemsApi, "/get_input_var_names", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets an array of names for the variables the model can use from other models implementing a BMI. 

Params:

Return: Vector{String}, OpenAPI.Clients.ApiResponse
"""
function get_input_var_names(_api::ExchangeItemsApi; _mediaType=nothing)
    _ctx = _oacinternal_get_input_var_names(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_input_var_names(_api::ExchangeItemsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_input_var_names(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_output_item_count_ExchangeItemsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Int64,
    Regex("^" * replace("0", "x"=>".") * "\$") => ProblemDetails,
)

function _oacinternal_get_output_item_count(_api::ExchangeItemsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_output_item_count_ExchangeItemsApi, "/get_output_item_count", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""The number of variables the model can provide other models implementing a BMI. 

Params:

Return: Int64, OpenAPI.Clients.ApiResponse
"""
function get_output_item_count(_api::ExchangeItemsApi; _mediaType=nothing)
    _ctx = _oacinternal_get_output_item_count(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_output_item_count(_api::ExchangeItemsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_output_item_count(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_output_var_names_ExchangeItemsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{String},
    Regex("^" * replace("0", "x"=>".") * "\$") => ProblemDetails,
)

function _oacinternal_get_output_var_names(_api::ExchangeItemsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_output_var_names_ExchangeItemsApi, "/get_output_var_names", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets an array of names for the variables the model can provide to other models implementing a BMI. 

Params:

Return: Vector{String}, OpenAPI.Clients.ApiResponse
"""
function get_output_var_names(_api::ExchangeItemsApi; _mediaType=nothing)
    _ctx = _oacinternal_get_output_var_names(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_output_var_names(_api::ExchangeItemsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_output_var_names(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_component_name
export get_input_item_count
export get_input_var_names
export get_output_item_count
export get_output_var_names
