# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct UniformRectilinearApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `UniformRectilinearApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ UniformRectilinearApi }) = "http://localhost:50051"

const _returntypes_get_grid_origin_UniformRectilinearApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Float64},
    Regex("^" * replace("0", "x"=>".") * "\$") => ProblemDetails,
)

function _oacinternal_get_grid_origin(_api::UniformRectilinearApi, grid::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_grid_origin_UniformRectilinearApi, "/get_grid_origin/{grid}", [])
    OpenAPI.Clients.set_param(_ctx.path, "grid", grid)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the coordinates of the lower-left corner of the model grid. 

Params:
- grid::Int64 (required)

Return: Vector{Float64}, OpenAPI.Clients.ApiResponse
"""
function get_grid_origin(_api::UniformRectilinearApi, grid::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_grid_origin(_api, grid; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_grid_origin(_api::UniformRectilinearApi, response_stream::Channel, grid::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_grid_origin(_api, grid; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_grid_shape_UniformRectilinearApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Int64},
    Regex("^" * replace("0", "x"=>".") * "\$") => ProblemDetails,
)

function _oacinternal_get_grid_shape(_api::UniformRectilinearApi, grid::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_grid_shape_UniformRectilinearApi, "/get_grid_shape/{grid}", [])
    OpenAPI.Clients.set_param(_ctx.path, "grid", grid)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the dimensions of the model grid.

Params:
- grid::Int64 (required)

Return: Vector{Int64}, OpenAPI.Clients.ApiResponse
"""
function get_grid_shape(_api::UniformRectilinearApi, grid::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_grid_shape(_api, grid; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_grid_shape(_api::UniformRectilinearApi, response_stream::Channel, grid::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_grid_shape(_api, grid; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_grid_spacing_UniformRectilinearApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Float64},
    Regex("^" * replace("0", "x"=>".") * "\$") => ProblemDetails,
)

function _oacinternal_get_grid_spacing(_api::UniformRectilinearApi, grid::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_grid_spacing_UniformRectilinearApi, "/get_grid_spacing/{grid}", [])
    OpenAPI.Clients.set_param(_ctx.path, "grid", grid)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the distance between the nodes of the model grid.

Params:
- grid::Int64 (required)

Return: Vector{Float64}, OpenAPI.Clients.ApiResponse
"""
function get_grid_spacing(_api::UniformRectilinearApi, grid::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_grid_spacing(_api, grid; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_grid_spacing(_api::UniformRectilinearApi, response_stream::Channel, grid::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_grid_spacing(_api, grid; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_grid_origin
export get_grid_shape
export get_grid_spacing
