# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

function get_var_grid_read(handler)
  function get_var_grid_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    path_params = HTTP.getparams(req)
    openapi_params["name"] = OpenAPI.Servers.to_param(String, path_params, "name"; required = true)
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function get_var_grid_validate(handler)
  function get_var_grid_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    OpenAPI.validate_param("name", "get_var_grid", :minLength, openapi_params["name"], 1)

    return handler(req)
  end
end

function get_var_grid_invoke(impl; post_invoke = nothing)
  function get_var_grid_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.get_var_grid(req::HTTP.Request, openapi_params["name"];)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function get_var_itemsize_read(handler)
  function get_var_itemsize_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    path_params = HTTP.getparams(req)
    openapi_params["name"] = OpenAPI.Servers.to_param(String, path_params, "name"; required = true)
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function get_var_itemsize_validate(handler)
  function get_var_itemsize_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    OpenAPI.validate_param("name", "get_var_itemsize", :minLength, openapi_params["name"], 1)

    return handler(req)
  end
end

function get_var_itemsize_invoke(impl; post_invoke = nothing)
  function get_var_itemsize_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.get_var_itemsize(req::HTTP.Request, openapi_params["name"];)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function get_var_location_read(handler)
  function get_var_location_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    path_params = HTTP.getparams(req)
    openapi_params["name"] = OpenAPI.Servers.to_param(String, path_params, "name"; required = true)
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function get_var_location_validate(handler)
  function get_var_location_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    OpenAPI.validate_param("name", "get_var_location", :minLength, openapi_params["name"], 1)

    return handler(req)
  end
end

function get_var_location_invoke(impl; post_invoke = nothing)
  function get_var_location_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.get_var_location(req::HTTP.Request, openapi_params["name"];)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function get_var_nbytes_read(handler)
  function get_var_nbytes_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    path_params = HTTP.getparams(req)
    openapi_params["name"] = OpenAPI.Servers.to_param(String, path_params, "name"; required = true)
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function get_var_nbytes_validate(handler)
  function get_var_nbytes_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    OpenAPI.validate_param("name", "get_var_nbytes", :minLength, openapi_params["name"], 1)

    return handler(req)
  end
end

function get_var_nbytes_invoke(impl; post_invoke = nothing)
  function get_var_nbytes_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.get_var_nbytes(req::HTTP.Request, openapi_params["name"];)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function get_var_type_read(handler)
  function get_var_type_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    path_params = HTTP.getparams(req)
    openapi_params["name"] = OpenAPI.Servers.to_param(String, path_params, "name"; required = true)
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function get_var_type_validate(handler)
  function get_var_type_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    OpenAPI.validate_param("name", "get_var_type", :minLength, openapi_params["name"], 1)

    return handler(req)
  end
end

function get_var_type_invoke(impl; post_invoke = nothing)
  function get_var_type_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.get_var_type(req::HTTP.Request, openapi_params["name"];)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function get_var_units_read(handler)
  function get_var_units_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    path_params = HTTP.getparams(req)
    openapi_params["name"] = OpenAPI.Servers.to_param(String, path_params, "name"; required = true)
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function get_var_units_validate(handler)
  function get_var_units_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    OpenAPI.validate_param("name", "get_var_units", :minLength, openapi_params["name"], 1)

    return handler(req)
  end
end

function get_var_units_invoke(impl; post_invoke = nothing)
  function get_var_units_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.get_var_units(req::HTTP.Request, openapi_params["name"];)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function registerVariableInformationApi(
  router::HTTP.Router,
  impl;
  path_prefix::String = "",
  optional_middlewares...,
)
  HTTP.register!(
    router,
    "GET",
    path_prefix * "/get_var_grid/{name}",
    OpenAPI.Servers.middleware(
      impl,
      get_var_grid_read,
      get_var_grid_validate,
      get_var_grid_invoke;
      optional_middlewares...,
    ),
  )
  HTTP.register!(
    router,
    "GET",
    path_prefix * "/get_var_itemsize/{name}",
    OpenAPI.Servers.middleware(
      impl,
      get_var_itemsize_read,
      get_var_itemsize_validate,
      get_var_itemsize_invoke;
      optional_middlewares...,
    ),
  )
  HTTP.register!(
    router,
    "GET",
    path_prefix * "/get_var_location/{name}",
    OpenAPI.Servers.middleware(
      impl,
      get_var_location_read,
      get_var_location_validate,
      get_var_location_invoke;
      optional_middlewares...,
    ),
  )
  HTTP.register!(
    router,
    "GET",
    path_prefix * "/get_var_nbytes/{name}",
    OpenAPI.Servers.middleware(
      impl,
      get_var_nbytes_read,
      get_var_nbytes_validate,
      get_var_nbytes_invoke;
      optional_middlewares...,
    ),
  )
  HTTP.register!(
    router,
    "GET",
    path_prefix * "/get_var_type/{name}",
    OpenAPI.Servers.middleware(
      impl,
      get_var_type_read,
      get_var_type_validate,
      get_var_type_invoke;
      optional_middlewares...,
    ),
  )
  HTTP.register!(
    router,
    "GET",
    path_prefix * "/get_var_units/{name}",
    OpenAPI.Servers.middleware(
      impl,
      get_var_units_read,
      get_var_units_validate,
      get_var_units_invoke;
      optional_middlewares...,
    ),
  )
  return router
end
