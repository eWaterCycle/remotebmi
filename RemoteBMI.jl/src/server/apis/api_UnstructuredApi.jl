# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function get_grid_edge_count_read(handler)
    function get_grid_edge_count_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["grid"] = OpenAPI.Servers.to_param(Int64, path_params, "grid", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_grid_edge_count_validate(handler)
    function get_grid_edge_count_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_grid_edge_count_invoke(impl; post_invoke=nothing)
    function get_grid_edge_count_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_grid_edge_count(req::HTTP.Request, openapi_params["grid"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_grid_edge_nodes_read(handler)
    function get_grid_edge_nodes_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["grid"] = OpenAPI.Servers.to_param(Int64, path_params, "grid", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_grid_edge_nodes_validate(handler)
    function get_grid_edge_nodes_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_grid_edge_nodes_invoke(impl; post_invoke=nothing)
    function get_grid_edge_nodes_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_grid_edge_nodes(req::HTTP.Request, openapi_params["grid"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_grid_face_count_read(handler)
    function get_grid_face_count_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["grid"] = OpenAPI.Servers.to_param(Int64, path_params, "grid", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_grid_face_count_validate(handler)
    function get_grid_face_count_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_grid_face_count_invoke(impl; post_invoke=nothing)
    function get_grid_face_count_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_grid_face_count(req::HTTP.Request, openapi_params["grid"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_grid_face_edges_read(handler)
    function get_grid_face_edges_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["grid"] = OpenAPI.Servers.to_param(Int64, path_params, "grid", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_grid_face_edges_validate(handler)
    function get_grid_face_edges_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_grid_face_edges_invoke(impl; post_invoke=nothing)
    function get_grid_face_edges_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_grid_face_edges(req::HTTP.Request, openapi_params["grid"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_grid_face_nodes_read(handler)
    function get_grid_face_nodes_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["grid"] = OpenAPI.Servers.to_param(Int64, path_params, "grid", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_grid_face_nodes_validate(handler)
    function get_grid_face_nodes_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_grid_face_nodes_invoke(impl; post_invoke=nothing)
    function get_grid_face_nodes_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_grid_face_nodes(req::HTTP.Request, openapi_params["grid"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_grid_node_count_read(handler)
    function get_grid_node_count_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["grid"] = OpenAPI.Servers.to_param(Int64, path_params, "grid", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_grid_node_count_validate(handler)
    function get_grid_node_count_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_grid_node_count_invoke(impl; post_invoke=nothing)
    function get_grid_node_count_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_grid_node_count(req::HTTP.Request, openapi_params["grid"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_grid_nodes_per_face_read(handler)
    function get_grid_nodes_per_face_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["grid"] = OpenAPI.Servers.to_param(Int64, path_params, "grid", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_grid_nodes_per_face_validate(handler)
    function get_grid_nodes_per_face_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_grid_nodes_per_face_invoke(impl; post_invoke=nothing)
    function get_grid_nodes_per_face_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_grid_nodes_per_face(req::HTTP.Request, openapi_params["grid"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerUnstructuredApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "GET", path_prefix * "/get_grid_edge_count/{grid}", OpenAPI.Servers.middleware(impl, get_grid_edge_count_read, get_grid_edge_count_validate, get_grid_edge_count_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/get_grid_edge_nodes/{grid}", OpenAPI.Servers.middleware(impl, get_grid_edge_nodes_read, get_grid_edge_nodes_validate, get_grid_edge_nodes_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/get_grid_face_count/{grid}", OpenAPI.Servers.middleware(impl, get_grid_face_count_read, get_grid_face_count_validate, get_grid_face_count_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/get_grid_face_edges/{grid}", OpenAPI.Servers.middleware(impl, get_grid_face_edges_read, get_grid_face_edges_validate, get_grid_face_edges_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/get_grid_face_nodes/{grid}", OpenAPI.Servers.middleware(impl, get_grid_face_nodes_read, get_grid_face_nodes_validate, get_grid_face_nodes_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/get_grid_node_count/{grid}", OpenAPI.Servers.middleware(impl, get_grid_node_count_read, get_grid_node_count_validate, get_grid_node_count_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/get_grid_nodes_per_face/{grid}", OpenAPI.Servers.middleware(impl, get_grid_nodes_per_face_read, get_grid_nodes_per_face_validate, get_grid_nodes_per_face_invoke; optional_middlewares...))
    return router
end
