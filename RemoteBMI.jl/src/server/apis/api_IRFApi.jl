# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

function finalize_read(handler)
  function finalize_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function finalize_validate(handler)
  function finalize_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    return handler(req)
  end
end

function finalize_invoke(impl; post_invoke = nothing)
  function finalize_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.finalize(req::HTTP.Request;)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function initialize_read(handler)
  function initialize_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    openapi_params["InitializeRequest"] =
      OpenAPI.Servers.to_param_type(InitializeRequest, String(req.body))
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function initialize_validate(handler)
  function initialize_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    return handler(req)
  end
end

function initialize_invoke(impl; post_invoke = nothing)
  function initialize_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.initialize(req::HTTP.Request, openapi_params["InitializeRequest"];)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function update_read(handler)
  function update_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function update_validate(handler)
  function update_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    return handler(req)
  end
end

function update_invoke(impl; post_invoke = nothing)
  function update_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.update(req::HTTP.Request;)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function update_until_read(handler)
  function update_until_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    openapi_params["body"] = OpenAPI.Servers.to_param_type(Float64, String(req.body))
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function update_until_validate(handler)
  function update_until_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    return handler(req)
  end
end

function update_until_invoke(impl; post_invoke = nothing)
  function update_until_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.update_until(req::HTTP.Request, openapi_params["body"];)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function registerIRFApi(
  router::HTTP.Router,
  impl;
  path_prefix::String = "",
  optional_middlewares...,
)
  HTTP.register!(
    router,
    "DELETE",
    path_prefix * "/finalize",
    OpenAPI.Servers.middleware(
      impl,
      finalize_read,
      finalize_validate,
      finalize_invoke;
      optional_middlewares...,
    ),
  )
  HTTP.register!(
    router,
    "POST",
    path_prefix * "/initialize",
    OpenAPI.Servers.middleware(
      impl,
      initialize_read,
      initialize_validate,
      initialize_invoke;
      optional_middlewares...,
    ),
  )
  HTTP.register!(
    router,
    "POST",
    path_prefix * "/update",
    OpenAPI.Servers.middleware(
      impl,
      update_read,
      update_validate,
      update_invoke;
      optional_middlewares...,
    ),
  )
  HTTP.register!(
    router,
    "POST",
    path_prefix * "/update_until",
    OpenAPI.Servers.middleware(
      impl,
      update_until_read,
      update_until_validate,
      update_until_invoke;
      optional_middlewares...,
    ),
  )
  return router
end
