# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

function get_current_time_read(handler)
  function get_current_time_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function get_current_time_validate(handler)
  function get_current_time_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    return handler(req)
  end
end

function get_current_time_invoke(impl; post_invoke = nothing)
  function get_current_time_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.get_current_time(req::HTTP.Request;)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function get_end_time_read(handler)
  function get_end_time_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function get_end_time_validate(handler)
  function get_end_time_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    return handler(req)
  end
end

function get_end_time_invoke(impl; post_invoke = nothing)
  function get_end_time_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.get_end_time(req::HTTP.Request;)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function get_start_time_read(handler)
  function get_start_time_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function get_start_time_validate(handler)
  function get_start_time_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    return handler(req)
  end
end

function get_start_time_invoke(impl; post_invoke = nothing)
  function get_start_time_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.get_start_time(req::HTTP.Request;)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function get_time_step_read(handler)
  function get_time_step_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function get_time_step_validate(handler)
  function get_time_step_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    return handler(req)
  end
end

function get_time_step_invoke(impl; post_invoke = nothing)
  function get_time_step_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.get_time_step(req::HTTP.Request;)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function get_time_units_read(handler)
  function get_time_units_read_handler(req::HTTP.Request)
    openapi_params = Dict{String, Any}()
    req.context[:openapi_params] = openapi_params

    return handler(req)
  end
end

function get_time_units_validate(handler)
  function get_time_units_validate_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]

    return handler(req)
  end
end

function get_time_units_invoke(impl; post_invoke = nothing)
  function get_time_units_invoke_handler(req::HTTP.Request)
    openapi_params = req.context[:openapi_params]
    ret = impl.get_time_units(req::HTTP.Request;)
    resp = OpenAPI.Servers.server_response(ret)
    return (post_invoke === nothing) ? resp : post_invoke(req, resp)
  end
end

function registerTimeInformationApi(
  router::HTTP.Router,
  impl;
  path_prefix::String = "",
  optional_middlewares...,
)
  HTTP.register!(
    router,
    "GET",
    path_prefix * "/get_current_time",
    OpenAPI.Servers.middleware(
      impl,
      get_current_time_read,
      get_current_time_validate,
      get_current_time_invoke;
      optional_middlewares...,
    ),
  )
  HTTP.register!(
    router,
    "GET",
    path_prefix * "/get_end_time",
    OpenAPI.Servers.middleware(
      impl,
      get_end_time_read,
      get_end_time_validate,
      get_end_time_invoke;
      optional_middlewares...,
    ),
  )
  HTTP.register!(
    router,
    "GET",
    path_prefix * "/get_start_time",
    OpenAPI.Servers.middleware(
      impl,
      get_start_time_read,
      get_start_time_validate,
      get_start_time_invoke;
      optional_middlewares...,
    ),
  )
  HTTP.register!(
    router,
    "GET",
    path_prefix * "/get_time_step",
    OpenAPI.Servers.middleware(
      impl,
      get_time_step_read,
      get_time_step_validate,
      get_time_step_invoke;
      optional_middlewares...,
    ),
  )
  HTTP.register!(
    router,
    "GET",
    path_prefix * "/get_time_units",
    OpenAPI.Servers.middleware(
      impl,
      get_time_units_read,
      get_time_units_validate,
      get_time_units_invoke;
      optional_middlewares...,
    ),
  )
  return router
end
